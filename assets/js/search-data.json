{
  
    
        "post0": {
            "title": "Attached image",
            "content": "The following is an attached image. . . Result . あれ？ . watcher_1 | converting: _notebooks/2021-06-11_attached-image.ipynb watcher_1 | [Errno 2] No such file or directory: &#39;/data/_notebooks/attachment:image.png&#39; watcher_1 | Conversion failed on the following: watcher_1 | 2021-06-11_attached-image.ipynb . Reason? . I assume that the error [Errno 2] No such file or directory: &#39;/data/_notebooks/attachment:image.png&#39; occurred because the image was defined as![image.png](attachment:image.png) .",
            "url": "https://literate-computing.github.io/fastpages/2021/06/13/_attached-image.html",
            "relUrl": "/2021/06/13/_attached-image.html",
            "date": " • Jun 13, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "fastpages",
            "content": ".",
            "url": "https://literate-computing.github.io/fastpages/2021/06/13/_03_fastpages%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB.html",
            "relUrl": "/2021/06/13/_03_fastpages%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB.html",
            "date": " • Jun 13, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Attached image",
            "content": "The following is an attached image. . . Result . あれ？ . watcher_1 | converting: _notebooks/2021-06-11_attached-image.ipynb watcher_1 | [Errno 2] No such file or directory: &#39;/data/_notebooks/attachment:image.png&#39; watcher_1 | Conversion failed on the following: watcher_1 | 2021-06-11_attached-image.ipynb . Reason? . I assume that the error [Errno 2] No such file or directory: &#39;/data/_notebooks/attachment:image.png&#39; occurred because the image was defined as![image.png](attachment:image.png) .",
            "url": "https://literate-computing.github.io/fastpages/2021/06/10/_attached-image.html",
            "relUrl": "/2021/06/10/_attached-image.html",
            "date": " • Jun 10, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "fastpages",
            "content": ".",
            "url": "https://literate-computing.github.io/fastpages/2021/06/10/_03_fastpages%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB.html",
            "relUrl": "/2021/06/10/_03_fastpages%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB.html",
            "date": " • Jun 10, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://literate-computing.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://literate-computing.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "What is LC4RI?(en)",
          "content": "It is as essential as to share and communicate about infrastructure design and elaborated workflows with participants as to actually automate complex operations. Literate Computing for Reproducible Infrastructure is an approach both to describe automated operations as live code and to share predicted and reproducible outcomes among technical and non-technical alike in the form of narrative stories. We utilize Jupyter Notebook for sharing the reproducible experience. Operational engineering and DevOps should be one of the distinctive application areas for Jupyter. . “Automated Operation” [機械化] ≠ “Automation” [自働化] . We want to accomplish traceability and reproducibility in engineering operations. For those primary purposes, we utilize computational narrative tools, i.e., Jupyter Notebook. Every operation is described with no doubt and can be automated. Automated operation is always along with humans in the loop and bound up with a situation. It is something different from distilled automation, which tends to result in an anesthetizing effect (Nicholas InCarr. The Glass Cage). Automated operation is a partnership between humans and machines and augments our ability to learn and expertise. . Collaboration and Communication . For reproducibility and resilience for long-term sustainability, it is crucial not only to share knowledge but also to share reproducible experience participating in both tech and non-tech alike. Narrative stories allow collaborative communication between experts and novices to accumulate infrastructure knowledge and operational experience within an operation team. Moreover, it is efficient to share an understanding of how infrastructure is usable and really works between tech ops and non-tech users. Narrative stories also help communicate with users about how services are delivered and customized, considering reproducibility. . Literate Computing tools . Literate Computing Tools are our enhancements to Jupyter for achieving the following goals: . Giving awareness where you are; the cells are colored depending on their statuses. You can see how an operation is in progress and whether it has been succeeded. Light Cyan, Linen, and Pink represent “running”, “finished successfully” and “finished with errors” respectively. | Preventing miss-operation; once a cell has been executed, it “freezes” against unintended execution. Frozen cells will not be executed nor edited until those will be unfrozen. | A good operational outlook; as an enhancement for collapsible headings, collapsed code cells underneath are represented as bricks. The number of bricks represents operational complexities. Plus, you can run through whole bricks (collapsed code cells) with one click as a routine procedure. Color changes of bricks also represent the progress. | Assure traceability; infrastructure operation can generate massive output lines. LC_wrapper kernel summarizes output lines, and simultaneously all original output lines are saved into an individual file with a timestamp at each execution. You can investigate the total output and compare it with previous results for reviewing. | . Details of Tools .",
          "url": "https://literate-computing.github.io/fastpages/introduction_en/",
          "relUrl": "/introduction_en/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "LC4RIとは？(ja)",
          "content": "Literate Computing for Reproducible Infrastructure（以下 「LC4RI」）は、インフラ運用の場面において 機械的に再現できる、人が読み解ける手順 を手段として、過度に自動化に依存することのない、レジリエントな 人間中心の機械化 をめざしています。そこでは、作業を効率化しつつもブラックボックス化せず、作業に対する理解をチーム内でコミュニケーションできる、また、目的と手段の整合性や限界を理解し議論・評価できると言った場を維持することで、ノウハウの移転・共有を促し運用者のスキル向上とエンジニアリングチームの再生産をはかることを重視しています。 . 多くの現場では、管理サーバにログインしコンソール上で作業を行う、作業内容や証跡はWiki等に随時転記して共有する.. といった形態が一般的と思います。これに対しLC4RIでは運用管理サーバ上にNotebookサーバを配備し、作業単位毎にNotebookを作成、作業内容やメモを記述しながら随時実行するといった作業形態を推奨しています。作業の証跡を齟齬なく記録する仕組み、過去の作業記録を参照して機械的に再現あるいは流用できる仕組み、機械的に実行できるとともに人が読み解き補完することもできるNotebook手順を整備しています。 . . NII Open House 2019 用のデモを試す . このデモ環境ではJupyterのインタフェースを使って、運用作業の一例としてのログ分析や、我々のチームがLC4RIの実践のために開発している各種Extensionを使ってみるといった体験ができます。 . openhouse-2019-demo . なお、この環境ではNotebookを自由に作成、編集することができますが、Notebookに対する変更等は、 保存されません 。この環境はBinderサービスの上でデプロイされており、一定時間が経過すると自動的に削除されます。編集したNotebookなどの情報は失われますのでご注意ください。 . また、Sidestickies という Notebookに対して付箋を付与する機能では Scrapboxサービスを利用しています。デモ環境の Sidestickies 付箋ページ は参照のみで、編集できません。 . デモ環境を体験するに際して、 Binder および Scrapbox の利用規約は各自で確認ください。 . 質問等、お問い合わせは、Facebookページ https://www.facebook.com/groups/LiterateComputing/ に参加申請ください！ . Notebookの実行方法 . このデモ環境では、Notebookという形式で、実際に自身で実行可能な運用作業の例が保存されています。 . 00_デモ環境の利用方法を参考に、実際に実行をしてみてください。 | . Literate Computingの運用への適用例 . 運用への適用例の一つとして、ログを分析する手順を記述したNotebookを体感いただけます。 . 01_Literate_Computingの運用への適用例 | . NII謹製Literate Computing機能拡張 . Jupyterはもともとデータ分析用途に開発されたツールであるため、インフラの運用に適用するためにいくつかの機能拡張を施しています。以下は、その内容をご紹介するNotebookです。 . 02_NII謹製_Jupyterの機能拡張について | . Notebookを介したコミュニケーションについて . Jupyterで行った経験を効率的に共有するためにいくつかの機能拡張を施しています。以下は、その内容をご紹介するNotebookです。 . 03_Notebookを介したコミュニケーション | . Jupyter拡張 . Python2/Python3 kernel with LC_wrapper | multi_outputs | run_through | nblineage | i18n_cells | .",
          "url": "https://literate-computing.github.io/fastpages/introduction_ja/",
          "relUrl": "/introduction_ja/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page8": {
          "title": "Tools(en)",
          "content": "Literate Computing tools . Literate Computing Tools are our enhancements to Jupyter for achieving the following goals: . Giving awareness where you are; the cells are colored depending on their statuses. You can see how an operation is in progress and whether it has been succeeded. Light Cyan, Linen, and Pink represent “running”, “finished successfully” and “finished with errors” respectively. | Preventing miss-operation; once a cell has been executed, it “freezes” against unintended execution. Frozen cells will not be executed nor edited until those will be unfrozen. | A good operational outlook; as an enhancement for collapsible headings, collapsed code cells underneath are represented as bricks. The number of bricks represents operational complexities. Plus, you can run through whole bricks (collapsed code cells) with one click as a routine procedure. Color changes of bricks also represent the progress. | Assure traceability; infrastructure operation can generate massive output lines. LC_wrapper kernel summarizes output lines, and simultaneously all original output lines are saved into an individual file with a timestamp at each execution. You can investigate the total output and compare it with previous results for reviewing. | . Try the Demo . You can start the Notebook server on port 8888 with the following command. . docker run -it --rm -p 8888:8888 niicloudoperation/notebook:latest . Star . You can login the Notebook server with the authentication token in the startup message. . Jupyter Extensions . LC_run_through Extension Star . {% include youtube.html id=’pkzE_nwtEKQ’ %} . LC_wrapper Kernel Star . {% include youtube.html id=’-28XG7aHYY8’ %} . Other Extensions . multi_outputs Star | nblineage Star | Jupyter-LC_index Star | i18n_cells Star | . ... ... Notebooks for Reproducible Infrastructure . Literate-computing-Basics Star | Literate-computing-Hadoop Star | Literate-computing-Elasticsearch Star | . {% raw %} . Memo . {% endraw %} . The following video presents early practices back to late 2015 and 2016Q1. Since then, we have been developed Literate Computing Tools as enhancement of Jupyter. . {% include youtube.html id=’T309jbgdaqI’ %} .",
          "url": "https://literate-computing.github.io/fastpages/tools_en/",
          "relUrl": "/tools_en/",
          "date": ""
      }
      
  

  
      ,"page9": {
          "title": "ツール(ja)",
          "content": "Literate Computing tools . Literate Computing Tools are our enhancements to Jupyter for achieving the following goals: . Giving awareness where you are; the cells are colored depending on their statuses. You can see how an operation is in progress and whether it has been succeeded. Light Cyan, Linen, and Pink represent “running”, “finished successfully” and “finished with errors” respectively. | Preventing miss-operation; once a cell has been executed, it “freezes” against unintended execution. Frozen cells will not be executed nor edited until those will be unfrozen. | A good operational outlook; as an enhancement for collapsible headings, collapsed code cells underneath are represented as bricks. The number of bricks represents operational complexities. Plus, you can run through whole bricks (collapsed code cells) with one click as a routine procedure. Color changes of bricks also represent the progress. | Assure traceability; infrastructure operation can generate massive output lines. LC_wrapper kernel summarizes output lines, and simultaneously all original output lines are saved into an individual file with a timestamp at each execution. You can investigate the total output and compare it with previous results for reviewing. | . Try the Demo . You can start the Notebook server on port 8888 with the following command. . docker run -it --rm -p 8888:8888 niicloudoperation/notebook:latest . Star . You can login the Notebook server with the authentication token in the startup message. . Jupyter Extensions . LC_run_through Extension Star . {% include youtube.html id=’pkzE_nwtEKQ’ %} . LC_wrapper Kernel Star . {% include youtube.html id=’-28XG7aHYY8’ %} . Other Extensions . multi_outputs Star | nblineage Star | Jupyter-LC_index Star | i18n_cells Star | . ... ... Notebooks for Reproducible Infrastructure . Literate-computing-Basics Star | Literate-computing-Hadoop Star | Literate-computing-Elasticsearch Star | . {% raw %} . Memo . {% endraw %} . The following video presents early practices back to late 2015 and 2016Q1. Since then, we have been developed Literate Computing Tools as enhancement of Jupyter. . {% include youtube.html id=’T309jbgdaqI’ %} .",
          "url": "https://literate-computing.github.io/fastpages/tools_ja/",
          "relUrl": "/tools_ja/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://literate-computing.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}